services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - project_default

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://34.64.208.105:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "kafka-logs:1:1,error-logs:1:1"
    depends_on:
      - zookeeper
    networks:
      - project_default

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.4
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.keystore.type=PKCS12
      - xpack.security.transport.ssl.keystore.path=/usr/share/elasticsearch/config/springboot.p12
      - xpack.security.transport.ssl.keystore.password=${KEYSTORE_PASSWORD}
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.keystore.type=PKCS12
      - xpack.security.http.ssl.keystore.path=/usr/share/elasticsearch/config/springboot.p12
      - xpack.security.http.ssl.keystore.password=${KEYSTORE_PASSWORD}
      - xpack.security.http.ssl.verification_mode=certificate
      - ingest.geoip.downloader.enabled=true
      - KIBANA_SYSTEM_PASSWORD=${KIBANA_SYSTEM_PASSWORD}
      - xpack.license.self_generated.type=basic
      - ES_JAVA_OPTS=-Xms4g -Xmx4g -Djava.security.egd=file:/dev/urandom
      - node.store.allow_mmap=false
    volumes:
      - ./springboot.p12:/usr/share/elasticsearch/config/springboot.p12
      - es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - project_default
    command: >
      /bin/bash -c "
          # Elasticsearch 시작
          /usr/local/bin/docker-entrypoint.sh eswrapper & 
          echo 'Elasticsearch 시작 대기 중...'
          while ! curl -s -k https://localhost:9200 > /dev/null; do
            sleep 5
          done

          echo 'Elasticsearch가 실행 중입니다. 사용자 비밀번호 설정 중...'

          # elastic 사용자 비밀번호 변경
          curl -k -X POST 'https://localhost:9200/_security/user/elastic/_password' -u \"elastic:${ELASTIC_PASSWORD}\" -H 'Content-Type: application/json' -d '{\"password\": \"${ELASTIC_PASSWORD}\"}'"

    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "-u", "elastic:${ELASTIC_PASSWORD}", "https://localhost:9200/_cluster/health"]
      interval: 60s
      timeout: 120s
      retries: 10
      start_period: 300s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.4
    container_name: logstash
    user: root
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./springboot.p12:/usr/share/logstash/config/springboot.p12
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      ELASTICSEARCH_HOSTS: "https://elasticsearch:9200"
      ELASTICSEARCH_USER: "elastic"
      ELASTICSEARCH_PASSWORD: "${ELASTIC_PASSWORD}"
      KEYSTORE_PASSWORD: "${KEYSTORE_PASSWORD}"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/stats"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - project_default

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.4
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: https://elasticsearch:9200
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
      ELASTICSEARCH_SSL_VERIFICATION: certificate
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -s https://localhost:5601/api/status | grep -q 'Looking good'" ]
      interval: 10s
      timeout: 10s
      retries: 120
    volumes:
      - ./springboot.p12:/usr/share/kibana/config/springboot.p12
    networks:
      - project_default

  springboot:
    build:
      context: .
      dockerfile: Dockerfile
    dns:
      - 8.8.8.8
    container_name: springboot
    ports:
      - "443:443"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://zigzag-database.cnkq8ww86ffm.ap-northeast-2.rds.amazonaws.com:3306/zigzagDB
      SPRING_DATASOURCE_USERNAME: Kang
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_ELASTICSEARCH_REST_URIS: https://elasticsearch:9200
      SPRING_ELASTICSEARCH_REST_USERNAME: elastic
      SPRING_ELASTICSEARCH_REST_PASSWORD: ${ELASTIC_PASSWORD}
      SPRING_ELASTICSEARCH_REST_SSL_ENABLED: "true"
      SPRING_ELASTICSEARCH_REST_SSL_VERIFICATION_MODE: certificate
      SPRING_ELASTICSEARCH_REST_SSL_KEY_STORE: /app/springboot.p12
      SPRING_ELASTICSEARCH_REST_SSL_KEY_STORE_PASSWORD: ${KEYSTORE_PASSWORD}
      SPRING_ELASTICSEARCH_REST_SSL_KEY_STORE_TYPE: PKCS12
      SERVER_PORT: "443"
      SERVER_SSL_ENABLED: "true"
      SERVER_SSL_KEY_STORE: "/app/springboot.p12"
      SERVER_SSL_KEY_STORE_PASSWORD: ${KEYSTORE_PASSWORD}
      SERVER_SSL_KEY_STORE_TYPE: PKCS12
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started
      logstash:
        condition: service_healthy
    volumes:
      - ./springboot.p12:/app/springboot.p12:ro
    networks:
      - project_default

volumes:
  es-data:

networks:
  project_default:
    external: true
